import jsonfrom django.contrib import messagesfrom django.contrib.auth import logout, authenticate, loginfrom django.http import HttpResponse, HttpResponseRedirectfrom django.shortcuts import render# Create your views here.from home.form import SearchForm, SignUpFormfrom home.models import Setting, ContactForm, ContactFormMessage, UserProfilefrom product.models import Product, Category, Galeri, Commentdef index(request):    setting = Setting.objects.get(pk=1)    sliderdata = Product.objects.all()[:4]    category=Category.objects.all()    hotproducts = Product.objects.all()    lastproducts = Product.objects.all().order_by('-id')[:5]    context = {'setting': setting,               'category': category,               'page': 'home',               'hotproducts': hotproducts,               'lastproducts': lastproducts,               'sliderdata': sliderdata}    return render(request, 'index.html', context)def hakkimizda(request):    setting = Setting.objects.get(pk=1)    context = {'setting': setting, 'page': 'hakkimizda'}    return render(request, 'hakkimizda.html', context)def referanslar(request):    setting = Setting.objects.get(pk=1)    context = {'setting': setting, 'page': 'referanslar'}    return render(request, 'referanslarimiz.html', context)def iletisim(request):    if request.method == 'POST': # form post edildiyse        form = ContactForm(request.POST)        if form.is_valid():            data = ContactFormMessage   () # modelle bağlantı kur            data.name = form.cleaned_data['name'] # formdan bilgiyi al            data.email = form.cleaned_data['email']            data.subject = form.cleaned_data['subject']            data.message = form.cleaned_data['message']            data.ip = request.META.get('REMOTE_ADDR')            data.save() #veri tabanına kaydetme            messages.success(request, "Mesajınız gönderme başarılı!")            return HttpResponseRedirect ('/iletisim')    setting = Setting.objects.get(pk=1)    form=ContactForm()    context = {'setting': setting, 'form': form}    return render(request, 'iletisim.html',context)def category_products(request,id,slug):    category = Category.objects.all()    categorydata = Category.objects.get(pk=id)    products = Product.objects.filter(category_id=id)    context = {'products': products,'category': category,'categorydata': categorydata }    return render(request, 'products.html', context)def product_detail(request,id,slug):    category = Category.objects.all()    product = Product.objects.get(pk=id)    images = Galeri.objects.filter(product_id=id)    comments = Comment.objects.filter(product_id=id, status='True')    context = {'product': product,               'category': category,               'images': images,               'comments': comments,                }    return render(request, 'product_detail.html', context)def product_search(request):    if request.method == 'POST':  # form post edildiyse        form = SearchForm(request.POST)        if form.is_valid():            category = Category.objects.all()            query = form.cleaned_data['query']            products = Product.objects.filter(title__icontains=query)            context = {'products': products,                       'category': category,                       }            return render(request, 'products_search.html', context)    return HttpResponseRedirect('/')#def product_search_auto(request):    #    if request.is_ajax():    #       q = request.GET.get('term', '')    #      product = Product.objects.filter(city__icontains=q)    #      results = []    #     for pl in product:    #         product_json = {}    #        product_json = pl.city + "," + pl.state    #        results.append(product_json)    #    data = json.dumps(results)    # else:    #    data = 'fail'    # mimetype = 'application/json'    #return HttpResponse(data, mimetype)def logout_view(request):    logout(request)    return HttpResponseRedirect('/')def login_view(request):    if request.method == 'POST':        username = request.POST['username']        password = request.POST['password']        user = authenticate(request, username=username, password=password)        if user is not None:            login(request, user)            # Redirect to a success page.            return HttpResponseRedirect('/')        else:            messages.error(request, "Hatalı Giriş ! | K.adı veya Şifre Yanlış!")            return HttpResponseRedirect('/login')    category = Category.objects.all()    context = {'category': category,               }    return render(request, 'login.html', context)def signup_view(request):    if request.method == 'POST':        form = SignUpForm(request.POST)        if form.is_valid():            form.save()            username = form.cleaned_data.get('username')            password = form.cleaned_data.get('password1')            user = authenticate(request, username=username, password=password)            login(request,user)            #Create data in profile table            current_user = request.user            data=UserProfile()            data.user_id=current_user.id            data.image ="images/user/user.png"            data.save()            messages.success(request, "Siteye Başarılı Bir Şekilde Kayıt Oldunuz... ")            return HttpResponseRedirect('/')    form = SignUpForm()    category = Category.objects.all()    context = {'category': category,               'form': form,               }    return render(request, 'signup.html', context)